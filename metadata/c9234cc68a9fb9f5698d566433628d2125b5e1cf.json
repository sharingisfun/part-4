{"title":"Compilers : Compilers and interpreters [Coursera] [Stanford Univ","uid":8908380,"size":1301883732,"categoryP":"video","categoryS":"other","magnet":"?xt=urn:btih:c9234cc68a9fb9f5698d566433628d2125b5e1cf&amp;dn=Compilers+%3A+Compilers+and+interpreters+%5BCoursera%5D+%5BStanford+Univ&amp;tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&amp;tr=udp%3A%2F%2Fopen.demonii.com%3A1337&amp;tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&amp;tr=udp%3A%2F%2Fexodus.desync.com%3A6969","seeders":9,"leechers":2,"uploader":"diypromo","files":475,"time":1378961034,"description":"Compilers : Compilers and interpreters [Coursera] [Stanford University]\n\n\nBy Alex Aiken\n\n\nThis course will discuss the major ideas used today in the implementation of programming language compilers, including lexical analysis, parsing, syntax-directed translation, abstract syntax trees, types and type checking, intermediate languages, data flow analysis, program optimization, code generation, and run time systems. As a result, you will learn how a program written in a high-level language designed for humans is systematically translated into a program written in low-level assembly more suited to machines. Along the way we will also touch on how programming languages are designed, programming language semantics, and why there are so many different kinds of programming languages.\n\nThe course lectures will be presented in short videos. To help you master the material, there will be in-lecture questions to answer, quizzes, and two exams: a midterm and a final. There will also be homework in the form of exercises that ask you to show a sequence of logical steps needed to derive a specific result, such as the sequence of steps a type checker would perform to type check a piece of code, or the sequence of steps a parser would perform to parse an input string. This checking technology is the result of ongoing research at Stanford into developing innovative tools for education, and we're excited to be the first course ever to make it available to students.\nAn optional course project is to write a complete compiler for COOL, the Classroom Object Oriented Language. COOL has the essential features of a realistic programming language, but is small and simple enough that it can be implemented in a few thousand lines of code. Students who choose to do the project can implement it in either C++ or Java.\n\n\nWhy Study Compilers?\n\nEverything that computers do is the result of some program, and all of the millions of programs in the world are written in one of the many thousands of programming languages that have been developed over the last 60 years. Designing and implementing a programming language turns out to be difficult; some of the best minds in computer science have thought about the problems involved and contributed beautiful and deep results. Learning something about compilers will show you the interplay of theory and practice in computer science, especially how powerful general ideas combined with engineering insight can lead to practical solutions to very hard problems. Knowing how a compiler works will also make you a better programmer and increase your ability to learn new programming languages quickly. \n\n\nI hope you enjoy the course!\n","torrent":{"xt":"urn:btih:c9234cc68a9fb9f5698d566433628d2125b5e1cf","amp;dn":"Compilers+%3A+Compilers+and+interpreters+%5BCoursera%5D+%5BStanford+Univ","amp;tr":["udp%3A%2F%2Ftracker.openbittorrent.com%3A80","udp%3A%2F%2Fopen.demonii.com%3A1337","udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969","udp%3A%2F%2Fexodus.desync.com%3A6969"],"infoHash":"c9234cc68a9fb9f5698d566433628d2125b5e1cf","infoHashBuffer":{"type":"Buffer","data":[201,35,76,198,138,159,185,245,105,141,86,100,51,98,141,33,37,181,225,207]},"announce":[],"urlList":[]}}